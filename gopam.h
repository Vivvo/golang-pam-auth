/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/Vivvo/golang-pam-auth/src */


#line 1 "cgo-builtin-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

typedef struct { const char *p; ptrdiff_t n; } _GoString_;

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

 #include <security/pam_modules.h>
 #include <security/pam_appl.h>

#line 1 "cgo-generated-wrapper"

#line 3 "module_data.go"


#include "stdlib.h"
#include "stdint.h"
#include "security/pam_appl.h"

extern void module_data_set(pam_handle_t*, const char*, uint64_t);
extern uint64_t module_data_get(pam_handle_t*, const char*);

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

typedef _GoString_ GoString;
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern int goAuthenticate(pam_handle_t* p0, int p1, GoSlice p2);

extern int setCred(pam_handle_t* p0, int p1, GoSlice p2);

extern void clearModuleData(pam_handle_t* p0, uint64_t p1);

#ifdef __cplusplus
}
#endif
